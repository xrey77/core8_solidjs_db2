// <auto-generated />
using System;
using IBM.EntityFrameworkCore;
using IBM.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using core8_solidjs_db2.Helpers;

namespace core8_solidjs_db2.Migrations
{
    [DbContext(typeof(Db2DbContext))]
    [Migration("20250906072652_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseDb2IdentityColumns()
                .HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("core8_solidjs_db2.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseDb2IdentityColumn();

                    b.Property<int>("AlertStocks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ALERTSTOCKS");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("CATEGORY");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("COSTPRICE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("CREATEDAT");

                    b.Property<int>("CriticalStocks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CRITICALSTOCKS");

                    b.Property<string>("Descriptions")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("DESCRIPTIONS");

                    b.Property<string>("ProductPicture")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("PRODUCTPICTURE");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("QTY");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("SALEPRICE");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("SELLPRICE");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("UNIT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("UPDATEDAT");

                    b.HasKey("Id");

                    b.ToTable("PRODUCTS", null, t =>
                        {
                            t.HasComment("TABLESPACE PRODUCTS_TS");
                        });
                });

            modelBuilder.Entity("core8_solidjs_db2.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseDb2IdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("CREATEDAT");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("FirstName")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<int>("IsActivated")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ISACTIVATED");

                    b.Property<int>("Isblocked")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ISBLOCKED");

                    b.Property<string>("LastName")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("LASTNAME");

                    b.Property<int>("Mailtoken")
                        .HasColumnType("INTEGER")
                        .HasColumnName("MAILTOKEN");

                    b.Property<string>("Mobile")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("MOBILE");

                    b.Property<string>("Password_hash")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<string>("Profilepic")
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("PROFILEPIC");

                    b.Property<string>("Qrcodeurl")
                        .HasColumnType("VARCHAR(9000)")
                        .HasColumnName("QRCODEURL");

                    b.Property<string>("Roles")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("ROLES");

                    b.Property<string>("Secretkey")
                        .HasMaxLength(5000)
                        .HasColumnType("VARCHAR(5000)")
                        .HasColumnName("SECRETKEY");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMP")
                        .HasColumnName("UPDATEDAT");

                    b.Property<string>("UserName")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("USERNAME");

                    b.HasKey("Id");

                    b.ToTable("USERS", null, t =>
                        {
                            t.HasComment("TABLESPACE USERS_TS");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
